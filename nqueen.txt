def print_board(board):
    for row in board:
        print(" ".join(row))

def is_safe(board, row, col, n):
    # Check the row on the left side
    for i in range(col):
        if board[row][i] == "Q":
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == "Q":
            return False

    # Check lower diagonal on the left side
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == "Q":
            return False

    return True

def solve_n_queens(board, col, n):
    if col >= n:
        return True

    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = "Q"

            if solve_n_queens(board, col + 1, n):
                return True

            board[i][col] = "."  # Backtrack

    return False

def n_queens(n):
    if n <= 0:
        print("Please enter a valid number for n.")
        return

    board = [["." for _ in range(n)] for _ in range(n)]
    
    # Place the first Queen in the top row
    board[0][0] = "Q"

    if solve_n_queens(board, 1, n):
        print_board(board)
    else:
        print("No solution exists for {}-Queens problem.".format(n))

n = 8  # Change n to the desired number of Queens
n_queens(n)
